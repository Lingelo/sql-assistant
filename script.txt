-- Create the trigger function that will be used by multiple tables
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create enum type for members_segments
CREATE TYPE enum_members_segments_type AS ENUM ('type1', 'type2', 'type3');

create table "SequelizeMeta"
(
    name varchar(255) not null
        primary key
);

alter table "SequelizeMeta"
    owner to postgres;

create table cooperatives
(
    id                             integer GENERATED BY DEFAULT AS IDENTITY
        primary key,
    name                           varchar(255)                                                not null,
    customer_support_opening_hours varchar(1020),
    customer_support_phone_no      varchar(255),
    customer_support_email         varchar(255),
    created_at                     timestamp with time zone default now()                      not null,
    updated_at                     timestamp with time zone default now()                      not null,
    deleted_at                     timestamp with time zone,
    currency                       varchar(255)             default 'EUR'::character varying   not null,
    locales                        varchar(255)             default 'fr-FR'::character varying not null,
    slug                           varchar(255)                                                not null
        constraint cooperatives_slug_uq
            unique
);

alter table cooperatives
    owner to postgres;

create unique index "COOPERATIVES__PRIMARY"
    on cooperatives (id);

create trigger set_timestamp
    before update
    on cooperatives
    for each row
execute procedure trigger_set_timestamp();

create table sequelizemeta
(
    name varchar(255) not null
        primary key
);

alter table sequelizemeta
    owner to postgres;

create unique index name
    on sequelizemeta (name);

create unique index "SEQUELIZEMETA__PRIMARY"
    on sequelizemeta (name);

create table zones
(
    id             integer GENERATED BY DEFAULT AS IDENTITY
        primary key,
    cooperative_id integer                                not null
        references cooperatives
            on update cascade on delete cascade,
    name           varchar(255)                           not null,
    created_at     timestamp with time zone default now() not null,
    updated_at     timestamp with time zone default now() not null
);

alter table zones
    owner to postgres;

create index zones__cooperative_id
    on zones (cooperative_id);

create unique index "ZONES__PRIMARY"
    on zones (id);

create trigger set_timestamp
    before update
    on zones
    for each row
execute procedure trigger_set_timestamp();

create table members_segments
(
    id                integer GENERATED BY DEFAULT AS IDENTITY
        primary key,
    cooperative_id    integer                                not null
        references cooperatives,
    membership_number varchar(255)                           not null,
    segment_code      varchar(255)                           not null,
    type              enum_members_segments_type,
    created_at        timestamp with time zone default now() not null,
    updated_at        timestamp with time zone default now() not null
);

alter table members_segments
    owner to postgres;

create index ms_coop_member_key
    on members_segments (cooperative_id, membership_number);

create index ms_coop_segment_key
    on members_segments (cooperative_id, segment_code);

create unique index members_segments_uk
    on members_segments (cooperative_id, membership_number, segment_code);

create trigger set_timestamp
    before update
    on members_segments
    for each row
execute procedure trigger_set_timestamp();

create table memberships
(
    id                                         integer GENERATED BY DEFAULT AS IDENTITY
        primary key,
    cooperative_id                             integer                                not null
        references cooperatives
            on update cascade on delete cascade,
    membership_number                          varchar(255),
    email                                      varchar(255)
        constraint force_membership_email_lowercase
            check ((email)::text = lower((email)::text)),
    member_solvency                            boolean                  default false not null,
    member_sepa_payment                        boolean                  default false not null,
    member_coop_account_maximum_allowed_amount numeric(14, 4),
    member_coop_account_payment                boolean                  default false not null,
    member_company_name                        varchar(255)                           not null,
    member_siret_number                        varchar(255),
    member_first_name                          varchar(255),
    member_last_name                           varchar(255),
    member_phone_number                        varchar(255),
    member_valid_certiphyto                    boolean                  default false not null,
    member_certiphyto_end_date                 timestamp with time zone,
    member_segment                             varchar(255),
    member_default_store_id                    varchar(255),
    crop_ids                                   json,
    zone_id                                    integer
                                                                                      references zones
                                                                                          on update cascade on delete set null,
    member_card_payment                        boolean                  default false not null,
    member_valid_explosives_precursor          boolean                  default false not null,
    member_explosives_precursor_end_date       timestamp with time zone,
    created_at                                 timestamp with time zone default now() not null,
    updated_at                                 timestamp with time zone default now() not null,
    deleted_at                                 timestamp with time zone,
    bank_account_id                            varchar(255),
    member_consent                             boolean                  default false not null,
    idv2                                       varchar(255)                           not null
        constraint memberships_idv2_uq
            unique,
    constraint memberships_cooperative_id_membership_number
        unique (cooperative_id, membership_number)
);

alter table memberships
    owner to postgres;

create index id_and_membership_number_idx
    on memberships (id, membership_number);

create index id_and_cooperative_id_idx
    on memberships (id, cooperative_id);

create index memberships_cooperative_id
    on memberships (cooperative_id);

create index zone_id_foreign_key
    on memberships (zone_id);

create unique index memberships_cooperative_id_membership_number_idx
    on memberships (cooperative_id, membership_number);

create unique index "MEMBERSHIPS__PRIMARY"
    on memberships (id);

create index member_phone_number_idx
    on memberships (member_phone_number);

create trigger set_timestamp
    before update
    on memberships
    for each row
execute procedure trigger_set_timestamp();

create table users
(
    id                     integer GENERATED BY DEFAULT AS IDENTITY
        primary key,
    email                  varchar(255)
        unique
        constraint force_user_email_lowercase
            check ((email)::text = lower((email)::text)),
    uid                    varchar(255)
        constraint users_uid_unique
            unique
        constraint force_user_uid_lowercase
            check ((uid)::text = lower((uid)::text)),
    crop_ids               json,
    tech_cgu_accepted_at   timestamp with time zone,
    farmer_cgu_accepted_at timestamp with time zone,
    created_at             timestamp with time zone default now()                      not null,
    updated_at             timestamp with time zone default now()                      not null,
    current_profile_id     integer,
    farmer_cgu_version     varchar(255),
    tech_cgu_version       varchar(255),
    first_name             varchar(255),
    last_name              varchar(255),
    phone                  varchar(255),
    mobile_phone           varchar(255),
    zip_code               varchar(255),
    country_code           varchar(255)             default 'FR'::character varying    not null,
    language_code          varchar(255)             default 'fr-FR'::character varying not null,
    id_user_sfl            varchar(255),
    consent_token          varchar(255)             default NULL::character varying,
    consent_date           timestamp with time zone
);

alter table users
    owner to postgres;

create index users__email_idx
    on users (email);

create index users_current_profile_id_foreign_idx
    on users (current_profile_id);

create unique index users_uid_unique_idx
    on users (uid);

create unique index "USERS__PRIMARY"
    on users (id);

create trigger set_timestamp
    before update
    on users
    for each row
execute procedure trigger_set_timestamp();

create table profiles
(
    id                 integer GENERATED BY DEFAULT AS IDENTITY
        primary key,
    user_id            integer
        references users
            on update cascade on delete cascade,
    membership_id      integer
        references memberships
            on update cascade on delete cascade,
    confirmation_token varchar(255),
    confirmed_at       timestamp with time zone,
    created_from       varchar(255),
    created_at         timestamp with time zone default now() not null,
    updated_at         timestamp with time zone default now() not null,
    unique (user_id, membership_id)
);

alter table profiles
    owner to postgres;

alter table users
    add foreign key (current_profile_id) references profiles
        on update cascade on delete set null;

create index membership_id_and_confirmed_at_idx
    on profiles (membership_id, confirmed_at);

create index profiles_user_id
    on profiles (user_id);

create unique index "PROFILES__PRIMARY"
    on profiles (id);

create table stores
(
    id                                integer GENERATED BY DEFAULT AS IDENTITY
        primary key,
    name                              varchar(255)                           not null,
    code                              varchar(255)                           not null,
    schedule                          text                                   not null,
    address_line1                     varchar(255)                           not null,
    address_line2                     varchar(255),
    address_line3                     varchar(255),
    postal_code                       varchar(255)                           not null,
    city                              varchar(255)                           not null,
    region                            varchar(255)                           not null,
    gps_location_lat                  double precision,
    gps_location_long                 double precision,
    contact_phone                     varchar(255),
    accept_crop_protection            boolean                  default false not null,
    accept_fertilizer_bigbag          boolean                  default false not null,
    accept_fertilizer_tank            boolean                  default false not null,
    accept_fertilizer_bulk            boolean                  default false not null,
    cooperative_id                    integer
                                                                             references cooperatives
                                                                                 on update set null on delete set null,
    deleted                           boolean                  default false not null,
    is_pickup_point                   boolean,
    is_click_and_collect              boolean,
    is_departure_point                boolean,
    accept_seeds                      boolean                  default false not null,
    accept_fertilizer_other_packaging boolean                  default false not null,
    created_at                        timestamp with time zone default now() not null,
    updated_at                        timestamp with time zone default now() not null,
    constraint pickup_points_uq01
        unique (code, cooperative_id)
);

alter table stores
    owner to postgres;

create index pickup_points_cooperative_id_foreign_idx
    on stores (cooperative_id);

create unique index pickup_points_uq01_idx
    on stores (code, cooperative_id);

create unique index "STORES__PRIMARY"
    on stores (id);

create trigger set_timestamp
    before update
    on stores
    for each row
execute procedure trigger_set_timestamp();

create table technical_sales
(
    id                integer GENERATED BY DEFAULT AS IDENTITY
        primary key,
    uuid              varchar(255)                           not null,
    cooperative_id    integer                                not null
        references cooperatives
            on update restrict on delete cascade,
    first_name        varchar(255),
    last_name         varchar(255),
    mobile_phone      varchar(255),
    email             varchar(255)
        unique
        constraint force_technicalsales_email_lowercase
            check ((email)::text = lower((email)::text)),
    role              varchar(255),
    expertise_domains text,
    deleted           boolean                  default false not null,
    created_at        timestamp with time zone default now() not null,
    updated_at        timestamp with time zone default now() not null,
    constraint technical_sales_uq01
        unique (uuid, cooperative_id)
);

alter table technical_sales
    owner to postgres;

create unique index "TECHNICAL_SALES__PRIMARY"
    on technical_sales (id);

create index id_and_deleted_and_uuid_idx
    on technical_sales (id, deleted, uuid);

create unique index technical_sales_uq01_idx
    on technical_sales (uuid, cooperative_id);

create index technical_sales__cooperative_id
    on technical_sales (cooperative_id);

create index id_and_cooperative_id_and_deleted_idx
    on technical_sales (id, cooperative_id, deleted);

create index technical_sales__email_idx
    on technical_sales (email);

create trigger set_timestamp
    before update
    on technical_sales
    for each row
execute procedure trigger_set_timestamp();

create table shipping_addresses
(
    id            integer GENERATED BY DEFAULT AS IDENTITY
        primary key,
    code          varchar(255)                           not null,
    company_name  varchar(255)                           not null,
    contact       varchar(255)                           not null,
    line1         varchar(255)                           not null,
    line2         varchar(255),
    line3         varchar(255),
    zip_code      varchar(255)                           not null,
    city          varchar(255)                           not null,
    country_code  varchar(255)                           not null,
    membership_id integer                                not null
        references memberships
            on update restrict on delete cascade,
    deleted       boolean                  default false not null,
    created_at    timestamp with time zone default now() not null,
    updated_at    timestamp with time zone default now() not null,
    place_code    varchar(255),
    delivery_days varchar(255),
    constraint shipping_addresses_uq01
        unique (code, membership_id)
);

alter table shipping_addresses
    owner to postgres;

create index membership_id
    on shipping_addresses (membership_id);

create unique index shipping_addresses_uq01_idx
    on shipping_addresses (code, membership_id);

create unique index "SHIPPING_ADDRESSES_PRIMARY"
    on shipping_addresses (id);

create trigger set_timestamp
    before update
    on shipping_addresses
    for each row
execute procedure trigger_set_timestamp();

create table importer_reports
(
    id                  integer GENERATED BY DEFAULT AS IDENTITY
        primary key,
    report              json,
    type                varchar(255)                           not null,
    cooperative_id      integer                                not null
        references cooperatives
            on update restrict on delete restrict,
    line_error_count    integer,
    line_imported_count integer,
    user_id             integer
        references users
            on update restrict on delete restrict,
    user_email          varchar(255),
    file_name           text,
    file_url            text,
    manual_import       boolean                                not null,
    correlation_file_id text,
    created_at          timestamp with time zone default now() not null,
    updated_at          timestamp with time zone default now() not null
);

alter table importer_reports
    owner to postgres;

create index user_id
    on importer_reports (user_id);

create index importer_reports__cooperative_id
    on importer_reports (cooperative_id);

create unique index "IMPORTER_REPORTS__PRIMARY"
    on importer_reports (id);

create trigger set_timestamp
    before update
    on importer_reports
    for each row
execute procedure trigger_set_timestamp();

create table technical_sales_memberships
(
    membership_id     integer                                not null
        references memberships
            on update cascade on delete cascade,
    technical_sale_id integer                                not null
        references technical_sales
            on update cascade on delete cascade,
    created_at        timestamp with time zone default now() not null,
    updated_at        timestamp with time zone default now() not null,
    primary key (membership_id, technical_sale_id)
);

alter table technical_sales_memberships
    owner to postgres;

create index technical_sales_memberships_membership_id
    on technical_sales_memberships (membership_id);

create index technical_sale_id
    on technical_sales_memberships (technical_sale_id);

create unique index "TECHNICAL_SALES_MEMBERSHIPS__PRIMARY"
    on technical_sales_memberships (membership_id, technical_sale_id);

create trigger set_timestamp
    before update
    on technical_sales_memberships
    for each row
execute procedure trigger_set_timestamp();

create table technical_sales_stores
(
    store_id           integer not null
        constraint "technical_sales_stores_stores_FK"
            references stores
            on update cascade on delete cascade,
    technical_sales_id integer not null
        constraint "technical_sales_stores_technical_sales_FK"
            references technical_sales
            on update cascade on delete cascade,
    constraint "store_id_technical_sales_id_PK"
        primary key (store_id, technical_sales_id)
);

alter table technical_sales_stores
    owner to postgres;

create table membership_contacts
(
    id                           varchar(255)                           not null
        constraint membership_contacts_pk
            primary key,
    first_name                   varchar(255)                           not null,
    last_name                    varchar(255)                           not null,
    email                        varchar(255)                           not null
        constraint membership_contacts_email_lowercase
            check (lower((email)::text) = (email)::text),
    phone_number                 varchar(255),
    roles                        text,
    can_validate_order           boolean                  default false not null,
    certiphyto_end_date          timestamp with time zone,
    explosive_precursor_end_date timestamp with time zone,
    membership_idv2              varchar(255)                           not null
        constraint membership_contacts_membership_idv2_fk
            references memberships (idv2)
            on update cascade on delete cascade,
    created_at                   timestamp with time zone default now() not null,
    updated_at                   timestamp with time zone default now() not null,
    constraint membership_contacts_idv2_email_uq
        unique (membership_idv2, email)
);

alter table membership_contacts
    owner to postgres;

create table strategy_configurations
(
    id         integer GENERATED BY DEFAULT AS IDENTITY
        primary key,
    name       varchar(255)                           not null,
    partner_id integer                                not null,
    config     json                                   not null,
    created_at timestamp with time zone default now() not null,
    updated_at timestamp with time zone default now() not null
);

alter table strategy_configurations
    owner to postgres;
